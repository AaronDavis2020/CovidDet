# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import os
import torch
from solution.patientDet import patientDet, readData
from solution.inference import slicePredict
from solution.genLungMask import GenLungMask
from tempfile import TemporaryDirectory # 临时文件夹存放分割出肺部的png图片


class Runthread(QtCore.QThread): # 定义子线程，只负责检测病人序列，控件行为由主线程负责
    #  通过类成员对象定义信号对象
    _signal = pyqtSignal(str)

    def __init__(self, case_path):
        super(Runthread, self).__init__()
        self.case_path = case_path

    def __del__(self):
        self.wait()

    def run(self):
        # Use CUDA
        torch.cuda.set_device(0)
        use_cuda = torch.cuda.is_available()
        with TemporaryDirectory() as temp_dir: # temporary directory saving the masked slices
            glm = GenLungMask(self.case_path, temp_dir) # dcms path & target path
            dcm_list = glm.genLung()
            dcm_list = dcm_list[int(len(dcm_list)*0.1) : int(len(dcm_list)*0.83)] # truncate the slice sequence-head 10%,tail 17%
            inference = slicePredict(use_cuda, temp_dir, dcm_list) # temp dir contains masked lung(png)
            pat_dic = readData(inference, self.case_path)
            predic_list = patientDet(patient_dic=pat_dic)
            if predic_list[0][-1] == 'covid':
                self._signal.emit("诊断结果：疑似感染新冠肺炎") # 注意这里与_signal = pyqtSignal(str)中的str类型相同
            elif predic_list[0][-1] == 'cap':
                self._signal.emit("诊断结果：疑似社区获得性肺炎")
            else:
                self._signal.emit("诊断结果：未感染")

        # desktop_path = os.path.join(os.path.expanduser("~"), 'Desktop')
        # name = ['Patient','Class']
        # test = pd.DataFrame(columns=name, data=predic_list)
        # test.to_csv(os.path.join(desktop_path, "Covid19_detResult.csv"), encoding='gbk')


class Ui_MainWindow(object):
    def __init__(self):
        self.case_path = None
        self.sub_thread = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(562, 447)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(320, 230, 75, 31))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.startButton.setFont(font)
        self.startButton.setObjectName("startButton")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 261, 531, 111))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.labelState = QtWidgets.QLabel(self.layoutWidget)
        self.labelState.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.labelState.setFont(font)
        self.labelState.setObjectName("lae")
        self.verticalLayout.addWidget(self.labelState)
        self.progressBar = QtWidgets.QProgressBar(self.layoutWidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout.addWidget(self.progressBar)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.label_7 = QtWidgets.QLabel(self.layoutWidget)
        self.label_7.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_2.addWidget(self.label_7)
        self.labelResult = QtWidgets.QLabel(self.layoutWidget)
        self.labelResult.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.labelResult.setFont(font)
        self.labelResult.setAlignment(QtCore.Qt.AlignCenter)
        self.labelResult.setObjectName("labelResult")
        self.verticalLayout_2.addWidget(self.labelResult)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 50, 122, 131))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_3.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_3.addWidget(self.label_3)
        self.label_4 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_4.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_3.addWidget(self.label_4)
        self.label_5 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_5.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_3.addWidget(self.label_5)
        self.label_6 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_6.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_3.addWidget(self.label_6)
        self.layoutWidget2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget2.setGeometry(QtCore.QRect(110, 90, 135, 91))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.inputName = QtWidgets.QLineEdit(self.layoutWidget2)
        self.inputName.setObjectName("inputName")
        self.verticalLayout_4.addWidget(self.inputName)
        self.inputGender = QtWidgets.QLineEdit(self.layoutWidget2)
        self.inputGender.setObjectName("inputGender")
        self.verticalLayout_4.addWidget(self.inputGender)
        self.inputDate = QtWidgets.QLineEdit(self.layoutWidget2)
        self.inputDate.setObjectName("inputDate")
        self.verticalLayout_4.addWidget(self.inputDate)
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setGeometry(QtCore.QRect(170, 230, 75, 31))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.saveButton.setFont(font)
        self.saveButton.setObjectName("saveButton")
        self.layoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_2.setGeometry(QtCore.QRect(290, 50, 258, 131))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.selectButton = QtWidgets.QPushButton(self.layoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.selectButton.setFont(font)
        self.selectButton.setObjectName("selectButton")
        self.horizontalLayout.addWidget(self.selectButton)
        self.casePath = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.casePath.setObjectName("casePath")
        self.horizontalLayout.addWidget(self.casePath)
        self.verticalLayout_5.addLayout(self.horizontalLayout)
        self.dcmList = QtWidgets.QListWidget(self.layoutWidget_2)
        self.dcmList.setObjectName("dcmList")
        self.verticalLayout_5.addWidget(self.dcmList)
        self.layoutWidget.raise_()
        self.layoutWidget.raise_()
        self.layoutWidget.raise_()
        self.startButton.raise_()
        self.saveButton.raise_()
        self.layoutWidget_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 562, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.inputName, self.inputGender)
        MainWindow.setTabOrder(self.inputGender, self.inputDate)
        MainWindow.setTabOrder(self.inputDate, self.selectButton)
        MainWindow.setTabOrder(self.selectButton, self.casePath)
        MainWindow.setTabOrder(self.casePath, self.dcmList)
        MainWindow.setTabOrder(self.dcmList, self.saveButton)
        MainWindow.setTabOrder(self.saveButton, self.startButton)

        # 增加点击事件
        self.selectButton.clicked.connect(self.selectCase) # 注意是selectCase不是selectCase(),否则会直接调起函数
        self.saveButton.clicked.connect(self.saveInfo)
        self.startButton.clicked.connect(self.mainThread) # 绑定多线程触发事件

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startButton.setText(_translate("MainWindow", "开始诊断"))
        self.labelResult.setText(_translate("MainWindow", "待诊断"))
        self.labelState.setText(_translate("MainWindow", "等待开始"))
        self.label_7.setText(_translate("MainWindow", "诊断结果："))
        self.label_3.setText(_translate("MainWindow", "病人信息录入："))
        self.label_4.setText(_translate("MainWindow", "姓  名："))
        self.label_5.setText(_translate("MainWindow", "性  别："))
        self.label_6.setText(_translate("MainWindow", "入院时间："))
        self.saveButton.setText(_translate("MainWindow", "录入信息"))
        self.selectButton.setText(_translate("MainWindow", "选择病例"))

    def selectCase(self): # selectButton
        self.dcmList.clear()
        self.case_path = QtWidgets.QFileDialog.getExistingDirectory(None, "选择肺部CT切片路径", "/")
        while not self.case_path:
            choice = QtWidgets.QMessageBox.warning(self.selectButton, "警告", "请选择路径", QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes)
            if choice == QMessageBox.Yes:
                self.case_path = QtWidgets.QFileDialog.getExistingDirectory(None, "选择肺部CT切片路径", "/")
            else:
                return
        if self.case_path:
            self.dcmList.addItems(os.listdir(self.case_path))
            self.casePath.setText(self.case_path)
        else: # 弹窗选No则退出程序
            QApplication.instance().quit()

    def mainThread(self): # 主线程用来重绘界面。子线程中的处理结果需要反馈到界面，子线程里边不能执行界面更新操作 防止界面假死
        self.selectButton.setEnabled(False)
        self.startButton.setEnabled(False)
        self.saveButton.setEnabled(False)
        self.sub_thread = Runthread(self.case_path) # 创建子线程
        self.sub_thread._signal.connect(self.labelResult.setText) # 连接信号，线程连接回传到GUI事件
        self.sub_thread.start() # 开启子线程
        self.runProgress() # 开启进度条，由主线程负责刷新，否则会出现假死
        # t_progress = Thread(target=self.runProgress) # 子线程控制进度条会出现假死
        # t_progress.start()
        # t_progress.join()
        self.selectButton.setEnabled(True)
        self.startButton.setEnabled(True)
        self.saveButton.setEnabled(True)

    def saveInfo(self): # patientInfo
        name = self.inputName.text()
        gender = self.inputGender.text()
        date = self.inputDate.text()
        if name == '' or gender == '' or date == '':
            QMessageBox.warning(self.saveButton, "警告", "请补全病人信息！", QMessageBox.Ok, QMessageBox.Ok)
            return
        choice = QMessageBox.question(self.saveButton, "写入记录", "姓名：%s\n性别：%s\n住院日期：%s" % (name, gender, date),
                                      QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes)
        if choice == QMessageBox.Yes:
            QMessageBox.information(self.saveButton, "写入记录", "已保存！", QMessageBox.Ok, QMessageBox.Ok)
            self.inputName.clear()
            self.inputGender.clear()
            self.inputDate.clear()
        else:
            return

    def runProgress(self): # progressBar
        if self.dcmList.count() == 0:
            QMessageBox.warning(self.dcmList, "警告", "请加载数据！")
            return
        self.labelState.setText("正在诊断...")
        self.labelResult.setText("诊断中...")
        for i in range(100):
            if self.labelResult.text() in ("诊断结果：疑似感染新冠肺炎", "诊断结果：疑似社区获得性肺炎", "诊断结果：未感染"):
                self.progressBar.setValue(100)
                break
            self.progressBar.setValue(i + 1) # 更新进度条
            QThread.msleep(600) # 模拟处理进程，进度条逐渐增加

            # 对于执行很耗时的程序来说，由于PyQt需要等待程序执行完毕才能进行下一步，
            # 这个过程表现在界面上就是卡顿，而如果需要执行这个耗时程序时不断的刷新界面。
            # 那么就可以使用QApplication.processEvents()，那么就可以一边执行耗时程序，
            # 一边刷新界面的功能，给人的感觉就是程序运行很流畅，因此，
            # 在主函数执行耗时操作的地方，加入QApplication.processEvents()
            QApplication.processEvents() # 实时刷新
        self.labelState.setText("诊断完成")

